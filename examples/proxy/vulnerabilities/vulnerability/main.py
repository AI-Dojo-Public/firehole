from datetime import datetime
from structlog.stdlib import BoundLogger

from firehole.abstract.vulnerability import VulnerabilityAbstract


class Vulnerability(VulnerabilityAbstract):  # DO NOT RENAME the class
    def __init__(self, logger: BoundLogger):
        """
        Vulnerability.
        :param logger: Proxy logger
        """
        self._logger = logger.bind(vulnerability="my-vulnerability-name")

    def check_and_exploit(self) -> bool:
        """
        Check if the request uses the vulnerability and exploit in case it does.
        :return: True in case the vulnerability was used
        """
        self._logger.debug("Checking for exploit")
        if datetime.now().second % 2 == 0:
            # Do stuff
            self._logger.info("Exploit successful")
            return True

        return False
