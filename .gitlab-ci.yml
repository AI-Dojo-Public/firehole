default:
  image: registry.gitlab.ics.muni.cz:443/cryton/cryton/ci-python:latest
  interruptible: true
  artifacts:
    expire_in: 30 days

stages:
  - test
  - publish
  - build

.documentation:
  rules:
    - changes:
        - mkdocs.yml
        - docs/**/*
        - .gitlab-ci.yml
    - when: never

.test:
  stage: test
  rules:
    - changes:
        - src/**/*
        - tests/**/*
        - pyproject.toml
        - poetry.lock
        - examples/proxy/**/*
        - .gitlab-ci.yml
    - when: never
  before_script:
    - poetry install --with docs

build_documentation:
  extends: .documentation
  stage: test
  before_script:
    - poetry install --with docs
  script:
    - poetry run mkdocs build

test_linter:
  extends: .test
  script:
    - poetry run ruff check

test_formatter:
  extends: .test
  script:
    - poetry run ruff format --diff

.publish:
  stage: publish
  rules:
    - if: $CI_SERVER_HOST != "gitlab.ics.muni.cz"
      when: never
    - if: $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.([0-9]|[0-z])+$/ && $CI_COMMIT_REF_PROTECTED == "true"

upload_package_to_registry:
  extends: .publish
  script:
    - poetry config repositories.gitlab "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi"
    - poetry config http-basic.gitlab gitlab-ci-token "$CI_JOB_TOKEN"
    - poetry publish --repository gitlab --build

# Build and deploy pages
pages:
  extends: .documentation
  stage: build
  variables:
    HTTPS_REMOTE: https://${BOT_SHAKESPEARE_NAME}:${BOT_SHAKESPEARE_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
    PAGES_BRANCH: "pages"
  before_script:
    - apt update && apt install -y git
    - git config user.name $BOT_SHAKESPEARE_NAME
    - git config user.email $BOT_SHAKESPEARE_NAME@asd.asd
    - git remote remove origin
    - git remote add origin $HTTPS_REMOTE
    - git branch -D $PAGES_BRANCH || echo "Branch not present."
    - git fetch --depth=1 origin $PAGES_BRANCH || echo "Branch doesn't exist yet."
    - poetry install --with docs
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true"
    - if: $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+|x\.([0-9]|[0-z])+$/ && $CI_COMMIT_REF_PROTECTED == "true"
  script:
    - |
      if [[ "$CI_COMMIT_TAG" != "" ]]; then
        export DOCUMENTATION_VERSION=${CI_COMMIT_TAG%%.*}.x
        export ALIAS=latest
      else
        export DOCUMENTATION_VERSION=master
        export ALIAS=""
      fi
    - echo "DOCUMENTATION_VERSION $DOCUMENTATION_VERSION"
    - echo "ALIAS $ALIAS"
    - poetry run mike deploy
      --update-aliases
      --alias-type=redirect
      --push
      --branch $PAGES_BRANCH
      --deploy-prefix public
      $DOCUMENTATION_VERSION $ALIAS
    - poetry run mike set-default --push --branch $PAGES_BRANCH --deploy-prefix public latest || echo "The tag latest doesn't exist."
    - git checkout $PAGES_BRANCH
    - git log -1
  artifacts:
    expire_in: 30 days
    paths:
      - public/
